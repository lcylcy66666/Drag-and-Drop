{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://understanding-typescript/./src/components/base-component.ts","webpack://understanding-typescript/./src/util/validation.ts","webpack://understanding-typescript/./src/decorators/autobind.ts","webpack://understanding-typescript/./src/models/project.ts","webpack://understanding-typescript/./src/state/project-state.ts","webpack://understanding-typescript/./src/components/project-input.ts","webpack://understanding-typescript/./src/components/project-item.ts","webpack://understanding-typescript/./src/components/project-list.ts","webpack://understanding-typescript/./src/app.ts"],"sourcesContent":["// Component Base Class\nexport default abstract class Component<\n  T extends HTMLElement,\n  U extends HTMLElement\n> {\n  templateElement: HTMLTemplateElement;\n  hostElement: T;\n  element: U;\n\n  constructor(\n    templateId: string,\n    hostElementId: string,\n    insertAtStart: boolean,\n    newElementId?: string\n  ) {\n    this.templateElement = document.getElementById(\n      templateId\n    )! as HTMLTemplateElement;\n    this.hostElement = document.getElementById(hostElementId)! as T;\n\n    const importedNode = document.importNode(\n      this.templateElement.content,\n      true\n    );\n    this.element = importedNode.firstElementChild as U;\n    if (newElementId) {\n      this.element.id = newElementId;\n    }\n\n    this.attach(insertAtStart);\n  }\n\n  private attach(insertAtBeginning: boolean) {\n    this.hostElement.insertAdjacentElement(\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n\n  abstract configure(): void;\n  abstract renderContent(): void;\n}\n","// Validation\nexport interface Validatable {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validatableInput: Validatable) {\n  let isValid = true;\n  if (validatableInput.required) {\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n  }\n  if (\n    validatableInput.minLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length >= validatableInput.minLength;\n  }\n  if (\n    validatableInput.maxLength != null &&\n    typeof validatableInput.value === \"string\"\n  ) {\n    isValid =\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\n  }\n  if (\n    validatableInput.min != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value >= validatableInput.min;\n  }\n  if (\n    validatableInput.max != null &&\n    typeof validatableInput.value === \"number\"\n  ) {\n    isValid = isValid && validatableInput.value <= validatableInput.max;\n  }\n  return isValid;\n}\n","// autobind decorator\nexport function autobind(_: any, _2: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n  const adjDescriptor: PropertyDescriptor = {\n    configurable: true,\n    get() {\n      const boundFn = originalMethod.bind(this);\n      return boundFn;\n    },\n  };\n  return adjDescriptor;\n}\n","// Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","import { Project, ProjectStatus } from \"../models/project\";\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n  protected listeners: Listener<T>[] = [];\n\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\nexport class ProjectState extends State<Project> {\n  private projects: Project[] = [];\n  private static instance: ProjectState;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance() {\n    if (this.instance) {\n      return this.instance;\n    }\n    this.instance = new ProjectState();\n    return this.instance;\n  }\n\n  addProject(title: string, description: string, numOfPeople: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      numOfPeople,\n      ProjectStatus.Active\n    );\n    this.projects.push(newProject);\n    this.updateListeners();\n  }\n\n  moveProject(projectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((prj) => prj.id === projectId);\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListeners();\n    }\n  }\n\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice());\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance();\n","import Cmp from \"./base-component\";\nimport { Validatable, validate } from \"../util/validation\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\n\n// ProjectInput Class\nexport class ProjectInput extends Cmp<HTMLDivElement, HTMLFormElement> {\n  titleInputElement: HTMLInputElement;\n  descriptionInputElement: HTMLInputElement;\n  peopleInputElement: HTMLInputElement;\n\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n    this.titleInputElement = this.element.querySelector(\n      \"#title\"\n    ) as HTMLInputElement;\n    this.descriptionInputElement = this.element.querySelector(\n      \"#description\"\n    ) as HTMLInputElement;\n    this.peopleInputElement = this.element.querySelector(\n      \"#people\"\n    ) as HTMLInputElement;\n    this.configure();\n  }\n\n  configure() {\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n\n  renderContent() {}\n\n  private gatherUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputElement.value;\n    const enteredDescription = this.descriptionInputElement.value;\n    const enteredPeople = this.peopleInputElement.value;\n\n    const titleValidatable: Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n    const descriptionValidatable: Validatable = {\n      value: enteredDescription,\n      required: true,\n      minLength: 5,\n    };\n    const peopleValidatable: Validatable = {\n      value: +enteredPeople,\n      required: true,\n      min: 1,\n      max: 5,\n    };\n\n    if (\n      !validate(titleValidatable) ||\n      !validate(descriptionValidatable) ||\n      !validate(peopleValidatable)\n    ) {\n      alert(\"Invalid input, please try again!\");\n      return;\n    } else {\n      return [enteredTitle, enteredDescription, +enteredPeople];\n    }\n  }\n\n  private clearInputs() {\n    this.titleInputElement.value = \"\";\n    this.descriptionInputElement.value = \"\";\n    this.peopleInputElement.value = \"\";\n  }\n\n  @autobind\n  private submitHandler(event: Event) {\n    event.preventDefault();\n    const userInput = this.gatherUserInput();\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput;\n      projectState.addProject(title, desc, people);\n      this.clearInputs();\n    }\n  }\n}\n","import { Draggable } from \"../models/drag-drop\";\nimport { Project } from \"../models/project\";\nimport  Component  from \"./base-component\";\nimport { autobind } from \"../decorators/autobind\";\n\n//ProjectItem Class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get persons() {\n    if (this.project.people === 1) {\n      return \"1 person\";\n    } else {\n      return `${this.project.people} persons`;\n    }\n  }\n\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id);\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragStartHandler(event: DragEvent): void {\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n\n  @autobind\n  dragEndHandler(_: DragEvent): void {\n    console.log(\"DragEnd\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n\n  renderContent() {\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\";\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","import { DragTarget } from \"../models/drag-drop\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport  Component  from \"./base-component\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\nimport { ProjectItem } from \"./project-item\";\n\n// ProjectList Class\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: \"active\" | \"finished\") {\n    super(\"project-list\", \"app\", false, `${type}-projects`);\n    this.assignedProjects = [];\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @autobind\n  dragOverHandler(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n      event.preventDefault();\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\");\n    }\n  }\n\n  @autobind\n  dropHandler(event: DragEvent) {\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\n    projectState.moveProject(\n      prjId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  @autobind\n  dragLeaveHandler(_: DragEvent) {\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.add(\"droppable\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((prj) => {\n        if (this.type === \"active\") {\n          return prj.status === ProjectStatus.Active;\n        }\n        return prj.status === ProjectStatus.Finished;\n      });\n      this.assignedProjects = relevantProjects;\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`;\n    this.element.querySelector(\"ul\")!.id = listId;\n    this.element.querySelector(\"h2\")!.textContent =\n      this.type.toUpperCase() + \" PROJECTS\";\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement;\n    listEl.innerHTML = \"\";\n    for (const prjItem of this.assignedProjects) {\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\n    }\n  }\n}\n","import { ProjectInput } from \"./components/project-input\";\nimport { ProjectList } from \"./components/project-list\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","ProjectState","listeners","addListener","listenerFn","push","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","hostId","persons","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}